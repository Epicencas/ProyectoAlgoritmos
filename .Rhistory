strOut = strOut.replace("h", h)
strOut="-1*("+strOut+")"
out=eval(strOut)+out
difCentral=out/(2*float(h))
TableOut = pandas.DataFrame({'Hacía adelante':difAdelante, 'Hacía atras':difAtras, 'Centrales': difCentral}, index=[0])
return TableOut
#Resolverdor de Newton
def newtonSolverX(x0, f_x, eps):
x0 = float(x0)
eps = float(eps)
xn = x0
error = 1
arrayIters = []
arrayF_x = []
arrayf_x = []
arrayXn = []
arrayErr = []
i = 0
h = 0.000001
while(error > eps):
print("...")
x_n1 = xn - (evaluate_Fx(f_x, xn)/evaluate_derivate_fx(f_x, xn, h))
error = abs(x_n1 - xn)
i = i + 1
xn = x_n1
arrayIters.append(i)
arrayXn.append(xn)
arrayErr.append(error)
solution = [i, xn, error]
print("Finalizo...")
TableOut = pandas.DataFrame({'Iter':arrayIters, 'Xn':arrayXn, 'Error': arrayErr})
return TableOut
def add(a, b):
a = int(a)
b = int(b)
resultado = a + b
return "El resultado es: " + str(resultado)
quit
runApp()
libraty("reticulate")
library("reticulate")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
reticulate::repl_python()
#f=-0.364218
import pandas
import re
import math
from math import e
#Evaluación REGREX
def evaluate_Fx(str_equ, valX):
x = valX
#strOut = str_equ
strOut = str_equ.replace("x", '*(x)')
strOut = strOut.replace("^", "**")
out = eval(strOut)
print(strOut)
return out
#Deferencias finitas para derivadas
def evaluate_derivate_fx(str_equ, x, h):
strOut = str_equ.replace("x", '*(x + h)')
strOut = strOut.replace("^", "**")
strOut = "-4*(" + strOut + ")"
out = eval(strOut)
strOut = str_equ.replace("x", '*(x + 2*h)')
strOut = strOut.replace("^", "**")
out = out + eval(strOut)
strOut = str_equ.replace("x", '*(x)')
strOut = strOut.replace("^", "**")
strOut = "3*(" + strOut + ")"
out = out + eval(strOut)
out = -out/(2*h)
print(out)
return out
#Extrapolación de Richardson
def extra_richards(str_equ, x, h):
#f(x)
strOut=str_equ.replace("x", x)
strOut = strOut.replace("^", "**")
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**0", "math.exp(0)")
#strOut=strOut.replace("e**-1", "*math.exp(-1)")
strOut="-3*("+strOut+")"
out=eval(strOut)
a=out
strOut = str_equ.replace("x", '(x + h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.05)", "math.exp(-(0 + 0.05))")
#strOut=strOut.replace("e**-(1 + 0.05)", "*math.exp(-(1 + 0.05))")
strOut="4*("+strOut+")"
out=eval(strOut)
b=out
strOut = str_equ.replace("x", '(x + 2*h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.1)", "math.exp(-(0 + 0.1))")
#strOut=strOut.replace("e**-(1 + 0.1)", "*math.exp(-(1 + 0.1))")
strOut="-1*("+strOut+")"
out=eval(strOut)
c=out
fh = (a+b+c)/(2*float(h))
strOut=str_equ.replace("x", x)
strOut = strOut.replace("^", "**")
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-0", "math.exp(-0)")
#strOut=strOut.replace("e**-1", "*math.exp(-1)")
strOut="-3*("+strOut+")"
out=eval(strOut)
d=out
strOut = str_equ.replace("x", '(x + h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.05)", "math.exp(-(0 + 0.05))")
#strOut=strOut.replace("e**-(1 + 0.05)", "*math.exp(-(1 + 0.05))")
strOut="-1*("+strOut+")"
out=eval(strOut)
f=out
#f=-0.364218
strOut = str_equ.replace("x", '(x + h/2)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.025)", "math.exp(-(0 + 0.025))")#1 − math.exp(-(0 + 0.05))
#strOut=strOut.replace("e**-(1 + 0.025)", "*math.exp(-(1 + 0.025))")
strOut="4*("+strOut+")"
out=eval(strOut)
e=out
fhmed = (d+e+f)/float(h)
fr = (4*fhmed-fh)/3
TableOut = pandas.DataFrame({'f(h)': fh, 'f(h/2)': fhmed, 'f(r)': fr, 'fx':a,'fx+h':b,'fx+2h':c,'fx':d,'fx+h/2':e,'-fx+h':f }, index=[0])
return TableOut
#Diferencias finitas dos puntos
def finite_difference(str_equ, x, h):
#Hacía adelante
strOut=str_equ.replace("x", x)
strOut = strOut.replace("^", "**")
strOut="-1*("+strOut+")"
out=eval(strOut)
strOut = str_equ.replace("x", '(x + h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
out=eval(strOut)+out
difAdelante = out/float(h)
#Hacía atras
strOut=str_equ.replace("x", x)
strOut = strOut.replace("^", "**")
out=eval(strOut)
strOut = str_equ.replace("x", '(x - h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut="-1*("+strOut+")"
out=eval(strOut)+out
difAtras = out/float(h)
#Central
strOut = str_equ.replace("x", '(x + h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
out=eval(strOut)
strOut = str_equ.replace("x", '(x - h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut="-1*("+strOut+")"
out=eval(strOut)+out
difCentral=out/(2*float(h))
TableOut = pandas.DataFrame({'Hacía adelante':difAdelante, 'Hacía atras':difAtras, 'Centrales': difCentral}, index=[0])
return TableOut
#Resolverdor de Newton
def newtonSolverX(x0, f_x, eps):
x0 = float(x0)
eps = float(eps)
xn = x0
error = 1
arrayIters = []
arrayF_x = []
arrayf_x = []
arrayXn = []
arrayErr = []
i = 0
h = 0.000001
while(error > eps):
print("...")
x_n1 = xn - (evaluate_Fx(f_x, xn)/evaluate_derivate_fx(f_x, xn, h))
error = abs(x_n1 - xn)
i = i + 1
xn = x_n1
arrayIters.append(i)
arrayXn.append(xn)
arrayErr.append(error)
solution = [i, xn, error]
print("Finalizo...")
TableOut = pandas.DataFrame({'Iter':arrayIters, 'Xn':arrayXn, 'Error': arrayErr})
return TableOut
def add(a, b):
a = int(a)
b = int(b)
resultado = a + b
return "El resultado es: " + str(resultado)
quit
runApp()
runApp()
import pandas
import re
import math
from math import e
#Evaluación REGREX
def evaluate_Fx(str_equ, valX):
x = valX
#strOut = str_equ
strOut = str_equ.replace("x", '*(x)')
strOut = strOut.replace("^", "**")
out = eval(strOut)
print(strOut)
return out
#Deferencias finitas para derivadas
def evaluate_derivate_fx(str_equ, x, h):
strOut = str_equ.replace("x", '*(x + h)')
strOut = strOut.replace("^", "**")
strOut = "-4*(" + strOut + ")"
out = eval(strOut)
strOut = str_equ.replace("x", '*(x + 2*h)')
strOut = strOut.replace("^", "**")
out = out + eval(strOut)
strOut = str_equ.replace("x", '*(x)')
strOut = strOut.replace("^", "**")
strOut = "3*(" + strOut + ")"
out = out + eval(strOut)
out = -out/(2*h)
print(out)
return out
#Extrapolación de Richardson
def extra_richards(str_equ, x, h):
#f(x)
strOut=str_equ.replace("x", x)
strOut = strOut.replace("^", "**")
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**0", "math.exp(0)")
#strOut=strOut.replace("e**-1", "*math.exp(-1)")
strOut="-3*("+strOut+")"
out=eval(strOut)
a=out
strOut = str_equ.replace("x", '(x + h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.05)", "math.exp(-(0 + 0.05))")
#strOut=strOut.replace("e**-(1 + 0.05)", "*math.exp(-(1 + 0.05))")
strOut="4*("+strOut+")"
out=eval(strOut)
b=out
strOut = str_equ.replace("x", '(x + 2*h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.1)", "math.exp(-(0 + 0.1))")
#strOut=strOut.replace("e**-(1 + 0.1)", "*math.exp(-(1 + 0.1))")
strOut="-1*("+strOut+")"
out=eval(strOut)
c=out
fh = (a+b+c)/(2*float(h))
strOut=str_equ.replace("x", x)
strOut = strOut.replace("^", "**")
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-0", "math.exp(-0)")
#strOut=strOut.replace("e**-1", "*math.exp(-1)")
strOut="-3*("+strOut+")"
out=eval(strOut)
d=out
strOut = str_equ.replace("x", '(x + h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.05)", "math.exp(-(0 + 0.05))")
#strOut=strOut.replace("e**-(1 + 0.05)", "*math.exp(-(1 + 0.05))")
strOut="-1*("+strOut+")"
out=eval(strOut)
f=out
#f=-0.364218
strOut = str_equ.replace("x", '(x + h/2)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.025)", "math.exp(-(0 + 0.025))")#1 − math.exp(-(0 + 0.05))
#strOut=strOut.replace("e**-(1 + 0.025)", "*math.exp(-(1 + 0.025))")
strOut="4*("+strOut+")"
out=eval(strOut)
e=out
fhmed = (d+e+f)/float(h)
fr = (4*fhmed-fh)/3
TableOut = pandas.DataFrame({'f(h)': fh, 'f(h/2)': fhmed, 'f(r)': fr, 'fx':a,'fx+h':b,'fx+2h':c,'fx':d,'fx+h/2':e,'-fx+h':f }, index=[0])
return TableOut
#Extrapolación de Richardson CDF
def extra_richardsCDF(str_equ, x, h):
#f(x+h)
strOut = str_equ.replace("x", '(x + h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.05)", "math.exp(-(0 + 0.05))")
#strOut=strOut.replace("e**-(1 + 0.05)", "*math.exp(-(1 + 0.05))")
strOut="("+strOut+")"
out=eval(strOut)
a=out
strOut = str_equ.replace("x", '(x - h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.1)", "math.exp(-(0 + 0.1))")
#strOut=strOut.replace("e**-(1 + 0.1)", "*math.exp(-(1 + 0.1))")
strOut="-1*("+strOut+")"
out=eval(strOut)
b=out
fh = (a+b)/(2*float(h))
strOut = str_equ.replace("x", '(x + h/2)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.025)", "math.exp(-(0 + 0.025))")#1 − math.exp(-(0 + 0.05))
#strOut=strOut.replace("e**-(1 + 0.025)", "*math.exp(-(1 + 0.025))")
strOut="("+strOut+")"
out=eval(strOut)
c=out
strOut = str_equ.replace("x", '(x - h/2)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut=strOut.replace("sin", "math.sin")
strOut=strOut.replace("sen", "math.sin")
#strOut=strOut.replace("e**-(0 + 0.025)", "math.exp(-(0 + 0.025))")#1 − math.exp(-(0 + 0.05))
#strOut=strOut.replace("e**-(1 + 0.025)", "*math.exp(-(1 + 0.025))")
strOut="-1*("+strOut+")"
out=eval(strOut)
d=out
fhmed = (c+d)/float(h)
fr = (4*fhmed-fh)/3
TableOut = pandas.DataFrame({'f(h)': fh, 'f(h/2)': fhmed, 'f(r)': fr, 'fx+h':a,'fx-h':b,'fx+h/2':c,'fx-h/2':d}, index=[0])
return TableOut
#Diferencias finitas dos puntos
def finite_difference(str_equ, x, h):
#Hacía adelante
strOut=str_equ.replace("x", x)
strOut = strOut.replace("^", "**")
strOut="-1*("+strOut+")"
out=eval(strOut)
strOut = str_equ.replace("x", '(x + h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
out=eval(strOut)+out
difAdelante = out/float(h)
#Hacía atras
strOut=str_equ.replace("x", x)
strOut = strOut.replace("^", "**")
out=eval(strOut)
strOut = str_equ.replace("x", '(x - h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut="-1*("+strOut+")"
out=eval(strOut)+out
difAtras = out/float(h)
#Central
strOut = str_equ.replace("x", '(x + h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
out=eval(strOut)
strOut = str_equ.replace("x", '(x - h)')
strOut = strOut.replace("^", "**")
strOut = strOut.replace("x", x)
strOut = strOut.replace("h", h)
strOut="-1*("+strOut+")"
out=eval(strOut)+out
difCentral=out/(2*float(h))
TableOut = pandas.DataFrame({'Hacía adelante':difAdelante, 'Hacía atras':difAtras, 'Centrales': difCentral}, index=[0])
return TableOut
#Resolverdor de Newton
def newtonSolverX(x0, f_x, eps):
x0 = float(x0)
eps = float(eps)
xn = x0
error = 1
arrayIters = []
arrayF_x = []
arrayf_x = []
arrayXn = []
arrayErr = []
i = 0
h = 0.000001
while(error > eps):
print("...")
x_n1 = xn - (evaluate_Fx(f_x, xn)/evaluate_derivate_fx(f_x, xn, h))
error = abs(x_n1 - xn)
i = i + 1
xn = x_n1
arrayIters.append(i)
arrayXn.append(xn)
arrayErr.append(error)
solution = [i, xn, error]
print("Finalizo...")
TableOut = pandas.DataFrame({'Iter':arrayIters, 'Xn':arrayXn, 'Error': arrayErr})
return TableOut
def add(a, b):
a = int(a)
b = int(b)
resultado = a + b
return "El resultado es: " + str(resultado)
reticulate::repl_python()
quit
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x_i = 0
reticulate::repl_python()
quit
runApp()
runApp()
runApp()
runApp()
runApp()
reticulate::repl_python()
arrayfXi = []
quit
runApp()
runApp()
runApp()
runApp()
reticulate::repl_python()
i = i + 1
quit
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
reticulate::repl_python()
TableOut = pandas.DataFrame({'Iter':arrayIters, 'Xi':arrayXi, 'fxi': arrayfXi, 's': arrayS })
quit
runApp()
runApp()
reticulate::repl_python()
if(i < n):
quit
runApp()
quit
runApp()
runApp()
runApp()
runApp()
runApp()
reticulate::repl_python()
x_i=b
quit
runApp()
runApp()
runApp()
runApp()
runApp()
